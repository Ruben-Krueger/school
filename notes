{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Job Scheduling \n",
    "\n",
    "Pick the (allowed) activity with earliest finish time "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Greedy Algorithms\n",
    "\n",
    "Whenever we make a greedy choice, we do not rule out the optimal solution\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Common Strategy for greedy algorithms\n",
    "\n",
    "**Inductive Hypothesis:**\n",
    "- After greedy choice t, you haven’t ruled out success.\n",
    "\n",
    "**Base case:**\n",
    "- Success is possible before you make any choices.\n",
    "\n",
    "**Inductive step:**\n",
    "- If you haven’t ruled out success after choice t, then you won’t rule out success after choice t+1.\n",
    "\n",
    "**Conclusion:**\n",
    "- If you reach the end of the algorithm and haven’t ruled\n",
    "out success then you must have succeeded."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Show We Don't Rule Out Success \n",
    "\n",
    "\n",
    "Suppose that you’re on track to make an optimal solution T*.\n",
    "- Eg, after you’ve picked activity i, you’re still on track.\n",
    "\n",
    "Suppose that T* disagrees with your next greedy\n",
    "choice.\n",
    "- Eg, it doesn’t involve activity k.\n",
    "\n",
    "Manipulate T* in order to make a solution T that’s not worse but that agrees with your greedy choice.\n",
    "\n",
    "- Eg, swap whatever activity T* did pick next with activity k."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:anaconda3]",
   "language": "python",
   "name": "conda-env-anaconda3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
